<?php
/**
 * Controller genrated using LaraAdmin
 * Help: http://laraadmin.com
 */

namespace App\Http\Controllers\LA;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Http\Requests;
use Auth;
use DB;
use Validator;
use Datatables;
use Collective\Html\FormFacade as Form;
use Dwij\Laraadmin\Models\Module;
use Dwij\Laraadmin\Models\ModuleFields;

use App\Models\__model_name__;

use App\Models\LanguageMeta;
use Gma\Api\LanguageTransportor;

class __controller_class_name__ extends Controller
{
	public $show_action = true;
	public $view_col = '__view_column__';
	public $listing_cols = ['id', __listing_cols__];

	public $module_name = "__module_name__";
	
	public function __construct() {
		// Field Access of Listing Columns
		if(\Dwij\Laraadmin\Helpers\LAHelper::laravel_ver() == 5.3) {
			$this->middleware(function ($request, $next) {
				$this->listing_cols = ModuleFields::listingColumnAccessScan($this->module_name, $this->listing_cols);
				return $next($request);
			});
		} else {
			$this->listing_cols = ModuleFields::listingColumnAccessScan($this->module_name, $this->listing_cols);
		}
	}
	
	/**
	 * Display a listing of the __module_name__.
	 *
	 * @return \Illuminate\Http\Response
	 */
	public function index()
	{
		$module = Module::get($this->module_name);

		if(Module::hasAccess($module->id)) {
			return View('la.__view_folder__.index', [
				'show_actions' => $this->show_action,
				'listing_cols' => $this->listing_cols,
				'module' => $module
			]);
		} else {
            return $this->redirectNotAccess($module);
        }
	}

	/**
	 * Show the form for creating a new __singular_var__.
	 *
	 * @return \Illuminate\Http\Response
	 */
	public function create($id)
	{
		if(Module::hasAccess($this->module_name, "create")) {			
			$__singular_var__ = new __model_name__();
			$module = Module::get($this->module_name);
			$module = translate_module($module);
			
			if ($id != 0 ) {
				$__singular_var__  = Module::copyDBRow($this->module_name, $id);
			}

			$module->row = $__singular_var__;
			
			return view('la.__view_folder__.create', [
				'module' => $module,
				'view_col' => $this->view_col,
			])->with('__singular_var__', $__singular_var__);
		} else {
			 return $this->redirectNotAccess(Module::get($this->module_name));
		}
	}

	/**
	 * Store a newly created __singular_var__ in database.
	 *
	 * @param  \Illuminate\Http\Request  $request
	 * @return \Illuminate\Http\Response
	 */
	public function store(Request $request)
	{
		if(Module::hasAccess($this->module_name, "create")) {
		
			$rules = Module::validateRules($this->module_name, $request);

			$result = $this->modify_request_before_validate($request);
			
			$validator = Validator::make($request->all(), $rules);
			
			if ($validator->fails()) {
				return redirect()->back()->withErrors($validator)->withInput();
			}

			$result = $this->modify_request_after_validate($request);

			if ($result != null) {
				return $result;
			}
			
			$insert_id = Module::insert($this->module_name, $request);
			
			return redirect()->route(config('laraadmin.adminRoute') . '.__route_resource__.index');
			
		} else {
			return $this->redirectNotAccess(Module::get($this->module_name));
		}
	}

	/**
	 * Display the specified __singular_var__.
	 *
	 * @param  int  $id
	 * @return \Illuminate\Http\Response
	 */
	public function show($id)
	{
		if(Module::hasAccess($this->module_name, "view")) {
			
			$__singular_var__ = __model_name__::find($id);
			if(isset($__singular_var__->id)) {
				$module = Module::get($this->module_name);

				$module->row = $__singular_var__;
				
				return view('la.__view_folder__.show', [
					'module' => $module,
					'view_col' => $this->view_col,
					'no_header' => true,
					'no_padding' => "no-padding"
				])->with('__singular_var__', $__singular_var__);
			} else {
				return view('errors.404', [
					'record_id' => $id,
					'record_name' => ucfirst("__singular_var__"),
				]);
			}
		} else {
			return $this->redirectNotAccess(Module::get($this->module_name));
		}
	}

	/**
	 * Show the form for editing the specified __singular_var__.
	 *
	 * @param  int  $id
	 * @return \Illuminate\Http\Response
	 */
	public function edit($id)
	{
		if(Module::hasAccess($this->module_name, "edit")) {			
			$__singular_var__ = __model_name__::find($id);
			if(isset($__singular_var__->id)) {	
				$module = Module::get($this->module_name);
				
				$module->row = $__singular_var__;
				
				return view('la.__view_folder__.edit', [
					'module' => $module,
					'view_col' => $this->view_col,
				])->with('__singular_var__', $__singular_var__);
			} else {
				return view('errors.404', [
					'record_id' => $id,
					'record_name' => ucfirst("__singular_var__"),
				]);
			}
		} else {
			return $this->redirectNotAccess(Module::get($this->module_name));
		}
	}

	/**
	 * Update the specified __singular_var__ in storage.
	 *
	 * @param  \Illuminate\Http\Request  $request
	 * @param  int  $id
	 * @return \Illuminate\Http\Response
	 */
	public function update(Request $request, $id)
	{
		if(Module::hasAccess($this->module_name, "edit")) {
			
			$rules = Module::validateRules($this->module_name, $request, true);

			$result = $this->modify_request_before_validate($request);
			
			$validator = Validator::make($request->all(), $rules);

			if ($validator->fails()) {
				return redirect()->back()->withErrors($validator)->withInput();;
			}

			$result = $this->modify_request_after_validate($request, false);
			
			if ($result != null) {
				return $result;
			}
			
			$insert_id = Module::updateRow($this->module_name, $request, $id);
			
			return redirect()->route(config('laraadmin.adminRoute') . '.__route_resource__.index');
			
		} else {
			return $this->redirectNotAccess(Module::get($this->module_name));
		}
	}

	/**
	 * Remove the specified __singular_var__ from storage.
	 *
	 * @param  int  $id
	 * @return \Illuminate\Http\Response
	 */
	public function destroy($id)
	{
		if(Module::hasAccess($this->module_name, "delete")) {
			LanguageMeta::where(['content_id' => mongo_id($id),
			'reference' => $this->module_name])->delete();

			__model_name__::find($id)->delete();
			
			// Redirecting to index() method
			return redirect()->route(config('laraadmin.adminRoute') . '.__route_resource__.index');
		} else {
			return $this->redirectNotAccess(Module::get($this->module_name));
		}
	}
	
	/**
	 * Datatable Ajax fetch
	 *
	 * @return
	 */
	public function dtajax(Request $request)
	{
		$values = __model_name__::search($request);

		if ($request->get("languages_filter") == ""){
			$langAndFrom = LanguageTransportor::getFromAndLang();
			$values = $values->where("lang", $langAndFrom['lang']);
		}
		$values = $values->get();

		$out = Datatables::of($values)->make(true);
		$data = $out->getData();

		$list = array();
        if (!empty($data->data)) {
            foreach ($data->data as $key => $row) {
                $list[] = array(
                    'id' => $row->_id,
                    'name' => exists_field($row,'name')
                );
            }
        }

		$data->data = array();
        foreach ($list as $row) {
            $item = array(
                $row['id'],
                '<a href="'.url(config('laraadmin.adminRoute').'/__route_resource__/'.$row['id']).'">'.$row['name'].'</a>'
            );

            if ($this->show_action) {
                $output = '';
                if (Module::hasAccess($this->module_name, 'edit')) {
                    $output .= '<a href="'.url(config('laraadmin.adminRoute').'/__route_resource__/'.$row['id'].'/edit').'" class="btn btn-warning btn-xs" style="display:inline;padding:2px 5px 3px 5px;"><i class="fa fa-edit"></i></a>';
                }

                if (Module::hasAccess($this->module_name, 'delete')) {
                    $output .= Form::open(['route' => [config('laraadmin.adminRoute').'.__route_resource__.destroy', $row['id']], 'method' => 'delete', 'style' => 'display:inline']);
                    $output .= ' <a class="btn btn-danger btn-xs row_delete" data-name="'.  $row['name'] .'" href="#" style="display:inline;padding:2px 5px 3px 5px;" name="delete_modal"><i class="fa fa-times"></i></a>';
                    $output .= Form::close();
                }

                $item[] = (string) $output;
            }
            $data->data[] = $item;
        }
		
		$out->setData($data);
		return $out;
	}

	/**
	 * modify 
	 *
	 * @return
	 */
	private function modify_request_before_validate(Request $request, $is_insert = true) {

		return null;
	}

	/**
	 * modify 
	 *
	 * @return
	 */
	private function modify_request_after_validate(Request $request, $is_insert = true) {

		return null;
	}
}
